cmake_minimum_required ( VERSION 3.10 )

# C++ standards
#----------------------------------------------------------
set ( CMAKE_GENERATOR_PLATFORM     x64)
set ( CMAKE_CXX_STANDARD           17 )
set ( CMAKE_CXX_STANDARD_REQUIRED  ON )
set ( CMAKE_CXX_EXTENSIONS         OFF )
set ( MY_CXX_COMPILE_FEATURES      cxx_generic_lambdas cxx_range_for cxx_strong_enums )

# Project setup
#----------------------------------------------------------
project ( Template
	LANGUAGES CXX
)

include ( version.cmake )

# Dependencies
#----------------------------------------------------------
include ( FetchContent )
include ( dependencies.cmake )

## Add dependencies
##---------------------------------------------------------
FetchContent_Declare ( sfml
	URL "${SFML_URL}"
)
FetchContent_GetProperties(sfml)
if (NOT sfml_POPULATED)
	FetchContent_Populate(sfml)
endif()

FetchContent_Declare ( dgm
	URL "${DGM_URL}"
)
FetchContent_GetProperties(dgm)
if (NOT dgm_POPULATED)
	FetchContent_Populate(dgm)
endif()

FetchContent_Declare ( tgui
	URL "${TGUI_URL}"
)
FetchContent_GetProperties(tgui)
if (NOT tgui_POPULATED)
	FetchContent_Populate(sfml)
endif()

## Set paths to dependencies
##---------------------------------------------------------
set ( SFML_FOLDER  "${sfml_SOURCE_DIR}" )
set ( DGM_FOLDER   "${dgm_SOURCE_DIR}" )
set ( TGUI_FOLDER  "${tgui_SOURCE_DIR}" )

include_directories(
	"${SFML_FOLDER}/include"
	"${DGM_FOLDER}/include"
	"${TGUI_FOLDER}/include"
)

link_directories(
	"${SFML_FOLDER}/lib"
	"${DGM_FOLDER}/lib"
	"${TGUI_FOLDER}/lib"
)

## Find libraries
##---------------------------------------------------------
# NOTE: SFML is linked dynamically from DGM
find_library ( LIB_DGM_D dgm-d NAMES dgm-d.lib HINTS "${DGM_FOLDER}/lib" )
find_library ( LIB_DGM_R dgm   NAMES dgm.lib   HINTS "${DGM_FOLDER}/lib" )

set ( LIB_DGM optimized ${LIB_DGM_R} debug ${LIB_DGM_D} )

find_library ( LIB_TGUI_D tgui-d NAMES tgui-d.lib HINTS "${TGUI_FOLDER}/lib" )
find_library ( LIB_TGUI_R tgui   NAMES tgui.lib   HINTS "${TGUI_FOLDER}/lib" )

set ( LIB_TGUI optimized ${LIB_TGUI_R} debug ${LIB_TGUI_D} )

# TODO: configure_file(<input> <output> COPYONLY) for SFML and TGUI dlls

# Sources
#----------------------------------------------------------
set ( SOURCE_FILES
	src/Main.cpp
	src/AppStateMainMenu.cpp
	src/AppStateMenuOptions.cpp
	src/AppStateIngame.cpp
)

set ( HEADER_FILES
	src/Globals.hpp
	src/AppStateMainMenu.hpp
	src/AppStateMenuOptions.hpp
	src/AppStateIngame.hpp
)

add_executable ( ${PROJECT_NAME} WIN32
	${SOURCE_FILES}
	${HEADER_FILES}
)
target_link_libraries( ${PROJECT_NAME} ${LIB_DGM} ${LIB_TGUI} )
target_compile_features( ${PROJECT_NAME} INTERFACE ${MY_CXX_COMPILE_FEATURES} )

# Installation
#----------------------------------------------------------
install (
    DIRECTORY    audio
    DESTINATION  audio
)

install (
    DIRECTORY    graphics
    DESTINATION  graphics
)

install (
    FILES        ${PROJECT_NAME}
    DESTINATION  bin
)

# TODO: dlls

# Packaging
#----------------------------------------------------------
set ( CPACK_GENERATOR "ZIP" )

set ( CPACK_PACKAGE_DESCRIPTION_SUMMARY "C++ extension library for SFML" )
set ( CPACK_PACKAGE_VERSION_MAJOR       "${PROJECT_VERSION_MAJOR}" )
set ( CPACK_PACKAGE_VERSION_MINOR       "${PROJECT_VERSION_MINOR}" )
set ( CPACK_PACKAGE_VERSION_PATCH       "${PROJECT_VERSION_PATCH}" )
set ( CPACK_PACKAGE_FILE_NAME           "${PROJECT_NAME}-${PROJECT_VERSION}-vc15x64" )

include ( CPack )